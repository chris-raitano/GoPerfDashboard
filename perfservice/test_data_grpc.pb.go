// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: test_data.proto

package perfservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PerfServiceClient is the client API for PerfService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PerfServiceClient interface {
	Analyze(ctx context.Context, opts ...grpc.CallOption) (PerfService_AnalyzeClient, error)
}

type perfServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerfServiceClient(cc grpc.ClientConnInterface) PerfServiceClient {
	return &perfServiceClient{cc}
}

func (c *perfServiceClient) Analyze(ctx context.Context, opts ...grpc.CallOption) (PerfService_AnalyzeClient, error) {
	stream, err := c.cc.NewStream(ctx, &PerfService_ServiceDesc.Streams[0], "/perfservice.PerfService/Analyze", opts...)
	if err != nil {
		return nil, err
	}
	x := &perfServiceAnalyzeClient{stream}
	return x, nil
}

type PerfService_AnalyzeClient interface {
	Send(*File) error
	Recv() (*Results, error)
	grpc.ClientStream
}

type perfServiceAnalyzeClient struct {
	grpc.ClientStream
}

func (x *perfServiceAnalyzeClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *perfServiceAnalyzeClient) Recv() (*Results, error) {
	m := new(Results)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PerfServiceServer is the server API for PerfService service.
// All implementations must embed UnimplementedPerfServiceServer
// for forward compatibility
type PerfServiceServer interface {
	Analyze(PerfService_AnalyzeServer) error
	mustEmbedUnimplementedPerfServiceServer()
}

// UnimplementedPerfServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPerfServiceServer struct {
}

func (UnimplementedPerfServiceServer) Analyze(PerfService_AnalyzeServer) error {
	return status.Errorf(codes.Unimplemented, "method Analyze not implemented")
}
func (UnimplementedPerfServiceServer) mustEmbedUnimplementedPerfServiceServer() {}

// UnsafePerfServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerfServiceServer will
// result in compilation errors.
type UnsafePerfServiceServer interface {
	mustEmbedUnimplementedPerfServiceServer()
}

func RegisterPerfServiceServer(s grpc.ServiceRegistrar, srv PerfServiceServer) {
	s.RegisterService(&PerfService_ServiceDesc, srv)
}

func _PerfService_Analyze_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PerfServiceServer).Analyze(&perfServiceAnalyzeServer{stream})
}

type PerfService_AnalyzeServer interface {
	Send(*Results) error
	Recv() (*File, error)
	grpc.ServerStream
}

type perfServiceAnalyzeServer struct {
	grpc.ServerStream
}

func (x *perfServiceAnalyzeServer) Send(m *Results) error {
	return x.ServerStream.SendMsg(m)
}

func (x *perfServiceAnalyzeServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PerfService_ServiceDesc is the grpc.ServiceDesc for PerfService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerfService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "perfservice.PerfService",
	HandlerType: (*PerfServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Analyze",
			Handler:       _PerfService_Analyze_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test_data.proto",
}
